services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: infrasight-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-infrasight}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-infrasight_password}
      POSTGRES_DB: ${POSTGRES_DB:-infrasight}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-infrasight} -d ${POSTGRES_DB:-infrasight}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infrasight-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: infrasight-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database configuration (async PostgreSQL for SQLAlchemy async)
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-infrasight}:${POSTGRES_PASSWORD:-infrasight_password}@db:5432/${POSTGRES_DB:-infrasight}

      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost:5174}

      # Application settings
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      # Mount source code for development (optional)
      - ./backend:/app:ro
    networks:
      - infrasight-network
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: infrasight-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - infrasight-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 5s
      retries: 3

# Named volumes for persistent data
volumes:
  db_data:
    driver: local

# Custom network for service communication
networks:
  infrasight-network:
    driver: bridge
